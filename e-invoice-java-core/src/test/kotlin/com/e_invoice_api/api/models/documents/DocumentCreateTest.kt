// File generated from our OpenAPI spec by Stainless.

package com.e_invoice_api.api.models.documents

import com.e_invoice_api.api.core.jsonMapper
import com.e_invoice_api.api.models.inbox.DocumentState
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import java.time.LocalDate
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Disabled
import org.junit.jupiter.api.Test

internal class DocumentCreateTest {

    @Disabled("skipped: tests are disabled for the time being")
    @Test
    fun create() {
        val documentCreate =
            DocumentCreate.builder()
                .amountDue(0.0)
                .addAttachment(
                    DocumentAttachmentCreate.builder()
                        .fileName("file_name")
                        .fileData("file_data")
                        .fileSize(0L)
                        .fileType("file_type")
                        .build()
                )
                .billingAddress("billing_address")
                .billingAddressRecipient("billing_address_recipient")
                .currency(CurrencyCode.EUR)
                .customerAddress("customer_address")
                .customerAddressRecipient("customer_address_recipient")
                .customerEmail("customer_email")
                .customerId("customer_id")
                .customerName("customer_name")
                .customerTaxId("customer_tax_id")
                .direction(DocumentDirection.INBOUND)
                .documentType(DocumentType.INVOICE)
                .dueDate(LocalDate.parse("2019-12-27"))
                .invoiceDate(LocalDate.parse("2019-12-27"))
                .invoiceId("invoice_id")
                .invoiceTotal(0.0)
                .addItem(
                    DocumentCreate.Item.builder()
                        .amount(0.0)
                        .date(null)
                        .description("description")
                        .productCode("product_code")
                        .quantity(0.0)
                        .tax(0.0)
                        .taxRate("tax_rate")
                        .unit(UnitOfMeasureCode._10)
                        .unitPrice(0.0)
                        .build()
                )
                .note("note")
                .addPaymentDetail(
                    PaymentDetailCreate.builder()
                        .bankAccountNumber("bank_account_number")
                        .iban("iban")
                        .paymentReference("payment_reference")
                        .swift("swift")
                        .build()
                )
                .paymentTerm("payment_term")
                .previousUnpaidBalance(0.0)
                .purchaseOrder("purchase_order")
                .remittanceAddress("remittance_address")
                .remittanceAddressRecipient("remittance_address_recipient")
                .serviceAddress("service_address")
                .serviceAddressRecipient("service_address_recipient")
                .serviceEndDate(LocalDate.parse("2019-12-27"))
                .serviceStartDate(LocalDate.parse("2019-12-27"))
                .shippingAddress("shipping_address")
                .shippingAddressRecipient("shipping_address_recipient")
                .state(DocumentState.DRAFT)
                .subtotal(0.0)
                .addTaxDetail(DocumentCreate.TaxDetail.builder().amount(0.0).rate("rate").build())
                .totalDiscount(0.0)
                .totalTax(0.0)
                .vendorAddress("vendor_address")
                .vendorAddressRecipient("vendor_address_recipient")
                .vendorEmail("vendor_email")
                .vendorName("vendor_name")
                .vendorTaxId("vendor_tax_id")
                .build()

        assertThat(documentCreate.amountDue()).contains(DocumentCreate.AmountDue.ofNumber(0.0))
        assertThat(documentCreate.attachments().getOrNull())
            .containsExactly(
                DocumentAttachmentCreate.builder()
                    .fileName("file_name")
                    .fileData("file_data")
                    .fileSize(0L)
                    .fileType("file_type")
                    .build()
            )
        assertThat(documentCreate.billingAddress()).contains("billing_address")
        assertThat(documentCreate.billingAddressRecipient()).contains("billing_address_recipient")
        assertThat(documentCreate.currency()).contains(CurrencyCode.EUR)
        assertThat(documentCreate.customerAddress()).contains("customer_address")
        assertThat(documentCreate.customerAddressRecipient()).contains("customer_address_recipient")
        assertThat(documentCreate.customerEmail()).contains("customer_email")
        assertThat(documentCreate.customerId()).contains("customer_id")
        assertThat(documentCreate.customerName()).contains("customer_name")
        assertThat(documentCreate.customerTaxId()).contains("customer_tax_id")
        assertThat(documentCreate.direction()).contains(DocumentDirection.INBOUND)
        assertThat(documentCreate.documentType()).contains(DocumentType.INVOICE)
        assertThat(documentCreate.dueDate()).contains(LocalDate.parse("2019-12-27"))
        assertThat(documentCreate.invoiceDate()).contains(LocalDate.parse("2019-12-27"))
        assertThat(documentCreate.invoiceId()).contains("invoice_id")
        assertThat(documentCreate.invoiceTotal())
            .contains(DocumentCreate.InvoiceTotal.ofNumber(0.0))
        assertThat(documentCreate.items().getOrNull())
            .containsExactly(
                DocumentCreate.Item.builder()
                    .amount(0.0)
                    .date(null)
                    .description("description")
                    .productCode("product_code")
                    .quantity(0.0)
                    .tax(0.0)
                    .taxRate("tax_rate")
                    .unit(UnitOfMeasureCode._10)
                    .unitPrice(0.0)
                    .build()
            )
        assertThat(documentCreate.note()).contains("note")
        assertThat(documentCreate.paymentDetails().getOrNull())
            .containsExactly(
                PaymentDetailCreate.builder()
                    .bankAccountNumber("bank_account_number")
                    .iban("iban")
                    .paymentReference("payment_reference")
                    .swift("swift")
                    .build()
            )
        assertThat(documentCreate.paymentTerm()).contains("payment_term")
        assertThat(documentCreate.previousUnpaidBalance())
            .contains(DocumentCreate.PreviousUnpaidBalance.ofNumber(0.0))
        assertThat(documentCreate.purchaseOrder()).contains("purchase_order")
        assertThat(documentCreate.remittanceAddress()).contains("remittance_address")
        assertThat(documentCreate.remittanceAddressRecipient())
            .contains("remittance_address_recipient")
        assertThat(documentCreate.serviceAddress()).contains("service_address")
        assertThat(documentCreate.serviceAddressRecipient()).contains("service_address_recipient")
        assertThat(documentCreate.serviceEndDate()).contains(LocalDate.parse("2019-12-27"))
        assertThat(documentCreate.serviceStartDate()).contains(LocalDate.parse("2019-12-27"))
        assertThat(documentCreate.shippingAddress()).contains("shipping_address")
        assertThat(documentCreate.shippingAddressRecipient()).contains("shipping_address_recipient")
        assertThat(documentCreate.state()).contains(DocumentState.DRAFT)
        assertThat(documentCreate.subtotal()).contains(DocumentCreate.Subtotal.ofNumber(0.0))
        assertThat(documentCreate.taxDetails().getOrNull())
            .containsExactly(DocumentCreate.TaxDetail.builder().amount(0.0).rate("rate").build())
        assertThat(documentCreate.totalDiscount())
            .contains(DocumentCreate.TotalDiscount.ofNumber(0.0))
        assertThat(documentCreate.totalTax()).contains(DocumentCreate.TotalTax.ofNumber(0.0))
        assertThat(documentCreate.vendorAddress()).contains("vendor_address")
        assertThat(documentCreate.vendorAddressRecipient()).contains("vendor_address_recipient")
        assertThat(documentCreate.vendorEmail()).contains("vendor_email")
        assertThat(documentCreate.vendorName()).contains("vendor_name")
        assertThat(documentCreate.vendorTaxId()).contains("vendor_tax_id")
    }

    @Disabled("skipped: tests are disabled for the time being")
    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val documentCreate =
            DocumentCreate.builder()
                .amountDue(0.0)
                .addAttachment(
                    DocumentAttachmentCreate.builder()
                        .fileName("file_name")
                        .fileData("file_data")
                        .fileSize(0L)
                        .fileType("file_type")
                        .build()
                )
                .billingAddress("billing_address")
                .billingAddressRecipient("billing_address_recipient")
                .currency(CurrencyCode.EUR)
                .customerAddress("customer_address")
                .customerAddressRecipient("customer_address_recipient")
                .customerEmail("customer_email")
                .customerId("customer_id")
                .customerName("customer_name")
                .customerTaxId("customer_tax_id")
                .direction(DocumentDirection.INBOUND)
                .documentType(DocumentType.INVOICE)
                .dueDate(LocalDate.parse("2019-12-27"))
                .invoiceDate(LocalDate.parse("2019-12-27"))
                .invoiceId("invoice_id")
                .invoiceTotal(0.0)
                .addItem(
                    DocumentCreate.Item.builder()
                        .amount(0.0)
                        .date(null)
                        .description("description")
                        .productCode("product_code")
                        .quantity(0.0)
                        .tax(0.0)
                        .taxRate("tax_rate")
                        .unit(UnitOfMeasureCode._10)
                        .unitPrice(0.0)
                        .build()
                )
                .note("note")
                .addPaymentDetail(
                    PaymentDetailCreate.builder()
                        .bankAccountNumber("bank_account_number")
                        .iban("iban")
                        .paymentReference("payment_reference")
                        .swift("swift")
                        .build()
                )
                .paymentTerm("payment_term")
                .previousUnpaidBalance(0.0)
                .purchaseOrder("purchase_order")
                .remittanceAddress("remittance_address")
                .remittanceAddressRecipient("remittance_address_recipient")
                .serviceAddress("service_address")
                .serviceAddressRecipient("service_address_recipient")
                .serviceEndDate(LocalDate.parse("2019-12-27"))
                .serviceStartDate(LocalDate.parse("2019-12-27"))
                .shippingAddress("shipping_address")
                .shippingAddressRecipient("shipping_address_recipient")
                .state(DocumentState.DRAFT)
                .subtotal(0.0)
                .addTaxDetail(DocumentCreate.TaxDetail.builder().amount(0.0).rate("rate").build())
                .totalDiscount(0.0)
                .totalTax(0.0)
                .vendorAddress("vendor_address")
                .vendorAddressRecipient("vendor_address_recipient")
                .vendorEmail("vendor_email")
                .vendorName("vendor_name")
                .vendorTaxId("vendor_tax_id")
                .build()

        val roundtrippedDocumentCreate =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(documentCreate),
                jacksonTypeRef<DocumentCreate>(),
            )

        assertThat(roundtrippedDocumentCreate).isEqualTo(documentCreate)
    }
}
