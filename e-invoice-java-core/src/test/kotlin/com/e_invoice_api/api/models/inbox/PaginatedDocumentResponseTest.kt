// File generated from our OpenAPI spec by Stainless.

package com.e_invoice_api.api.models.inbox

import com.e_invoice_api.api.core.jsonMapper
import com.e_invoice_api.api.models.documents.CurrencyCode
import com.e_invoice_api.api.models.documents.DocumentDirection
import com.e_invoice_api.api.models.documents.DocumentResponse
import com.e_invoice_api.api.models.documents.DocumentType
import com.e_invoice_api.api.models.documents.UnitOfMeasureCode
import com.e_invoice_api.api.models.documents.attachments.DocumentAttachment
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import java.time.LocalDate
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Disabled
import org.junit.jupiter.api.Test

internal class PaginatedDocumentResponseTest {

    @Disabled("skipped: tests are disabled for the time being")
    @Test
    fun create() {
        val paginatedDocumentResponse =
            PaginatedDocumentResponse.builder()
                .addItem(
                    DocumentResponse.builder()
                        .id("id")
                        .amountDue("amount_due")
                        .addAttachment(
                            DocumentAttachment.builder()
                                .id("id")
                                .fileName("file_name")
                                .fileSize(0L)
                                .fileType("file_type")
                                .fileUrl("file_url")
                                .build()
                        )
                        .billingAddress("billing_address")
                        .billingAddressRecipient("billing_address_recipient")
                        .currency(CurrencyCode.EUR)
                        .customerAddress("customer_address")
                        .customerAddressRecipient("customer_address_recipient")
                        .customerEmail("customer_email")
                        .customerId("customer_id")
                        .customerName("customer_name")
                        .customerTaxId("customer_tax_id")
                        .direction(DocumentDirection.INBOUND)
                        .documentType(DocumentType.INVOICE)
                        .dueDate(LocalDate.parse("2019-12-27"))
                        .invoiceDate(LocalDate.parse("2019-12-27"))
                        .invoiceId("invoice_id")
                        .invoiceTotal("invoice_total")
                        .addItem(
                            DocumentResponse.Item.builder()
                                .amount("amount")
                                .date(null)
                                .description("description")
                                .productCode("product_code")
                                .quantity("quantity")
                                .tax("tax")
                                .taxRate("tax_rate")
                                .unit(UnitOfMeasureCode._10)
                                .unitPrice("unit_price")
                                .build()
                        )
                        .note("note")
                        .addPaymentDetail(
                            DocumentResponse.PaymentDetail.builder()
                                .bankAccountNumber("bank_account_number")
                                .iban("iban")
                                .paymentReference("payment_reference")
                                .swift("swift")
                                .build()
                        )
                        .paymentTerm("payment_term")
                        .previousUnpaidBalance("previous_unpaid_balance")
                        .purchaseOrder("purchase_order")
                        .remittanceAddress("remittance_address")
                        .remittanceAddressRecipient("remittance_address_recipient")
                        .serviceAddress("service_address")
                        .serviceAddressRecipient("service_address_recipient")
                        .serviceEndDate(LocalDate.parse("2019-12-27"))
                        .serviceStartDate(LocalDate.parse("2019-12-27"))
                        .shippingAddress("shipping_address")
                        .shippingAddressRecipient("shipping_address_recipient")
                        .state(DocumentState.DRAFT)
                        .subtotal("subtotal")
                        .addTaxDetail(
                            DocumentResponse.TaxDetail.builder()
                                .amount("amount")
                                .rate("rate")
                                .build()
                        )
                        .totalDiscount("total_discount")
                        .totalTax("total_tax")
                        .vendorAddress("vendor_address")
                        .vendorAddressRecipient("vendor_address_recipient")
                        .vendorEmail("vendor_email")
                        .vendorName("vendor_name")
                        .vendorTaxId("vendor_tax_id")
                        .build()
                )
                .page(0L)
                .pageSize(0L)
                .pages(0L)
                .total(0L)
                .build()

        assertThat(paginatedDocumentResponse.items())
            .containsExactly(
                DocumentResponse.builder()
                    .id("id")
                    .amountDue("amount_due")
                    .addAttachment(
                        DocumentAttachment.builder()
                            .id("id")
                            .fileName("file_name")
                            .fileSize(0L)
                            .fileType("file_type")
                            .fileUrl("file_url")
                            .build()
                    )
                    .billingAddress("billing_address")
                    .billingAddressRecipient("billing_address_recipient")
                    .currency(CurrencyCode.EUR)
                    .customerAddress("customer_address")
                    .customerAddressRecipient("customer_address_recipient")
                    .customerEmail("customer_email")
                    .customerId("customer_id")
                    .customerName("customer_name")
                    .customerTaxId("customer_tax_id")
                    .direction(DocumentDirection.INBOUND)
                    .documentType(DocumentType.INVOICE)
                    .dueDate(LocalDate.parse("2019-12-27"))
                    .invoiceDate(LocalDate.parse("2019-12-27"))
                    .invoiceId("invoice_id")
                    .invoiceTotal("invoice_total")
                    .addItem(
                        DocumentResponse.Item.builder()
                            .amount("amount")
                            .date(null)
                            .description("description")
                            .productCode("product_code")
                            .quantity("quantity")
                            .tax("tax")
                            .taxRate("tax_rate")
                            .unit(UnitOfMeasureCode._10)
                            .unitPrice("unit_price")
                            .build()
                    )
                    .note("note")
                    .addPaymentDetail(
                        DocumentResponse.PaymentDetail.builder()
                            .bankAccountNumber("bank_account_number")
                            .iban("iban")
                            .paymentReference("payment_reference")
                            .swift("swift")
                            .build()
                    )
                    .paymentTerm("payment_term")
                    .previousUnpaidBalance("previous_unpaid_balance")
                    .purchaseOrder("purchase_order")
                    .remittanceAddress("remittance_address")
                    .remittanceAddressRecipient("remittance_address_recipient")
                    .serviceAddress("service_address")
                    .serviceAddressRecipient("service_address_recipient")
                    .serviceEndDate(LocalDate.parse("2019-12-27"))
                    .serviceStartDate(LocalDate.parse("2019-12-27"))
                    .shippingAddress("shipping_address")
                    .shippingAddressRecipient("shipping_address_recipient")
                    .state(DocumentState.DRAFT)
                    .subtotal("subtotal")
                    .addTaxDetail(
                        DocumentResponse.TaxDetail.builder().amount("amount").rate("rate").build()
                    )
                    .totalDiscount("total_discount")
                    .totalTax("total_tax")
                    .vendorAddress("vendor_address")
                    .vendorAddressRecipient("vendor_address_recipient")
                    .vendorEmail("vendor_email")
                    .vendorName("vendor_name")
                    .vendorTaxId("vendor_tax_id")
                    .build()
            )
        assertThat(paginatedDocumentResponse.page()).isEqualTo(0L)
        assertThat(paginatedDocumentResponse.pageSize()).isEqualTo(0L)
        assertThat(paginatedDocumentResponse.pages()).isEqualTo(0L)
        assertThat(paginatedDocumentResponse.total()).isEqualTo(0L)
    }

    @Disabled("skipped: tests are disabled for the time being")
    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val paginatedDocumentResponse =
            PaginatedDocumentResponse.builder()
                .addItem(
                    DocumentResponse.builder()
                        .id("id")
                        .amountDue("amount_due")
                        .addAttachment(
                            DocumentAttachment.builder()
                                .id("id")
                                .fileName("file_name")
                                .fileSize(0L)
                                .fileType("file_type")
                                .fileUrl("file_url")
                                .build()
                        )
                        .billingAddress("billing_address")
                        .billingAddressRecipient("billing_address_recipient")
                        .currency(CurrencyCode.EUR)
                        .customerAddress("customer_address")
                        .customerAddressRecipient("customer_address_recipient")
                        .customerEmail("customer_email")
                        .customerId("customer_id")
                        .customerName("customer_name")
                        .customerTaxId("customer_tax_id")
                        .direction(DocumentDirection.INBOUND)
                        .documentType(DocumentType.INVOICE)
                        .dueDate(LocalDate.parse("2019-12-27"))
                        .invoiceDate(LocalDate.parse("2019-12-27"))
                        .invoiceId("invoice_id")
                        .invoiceTotal("invoice_total")
                        .addItem(
                            DocumentResponse.Item.builder()
                                .amount("amount")
                                .date(null)
                                .description("description")
                                .productCode("product_code")
                                .quantity("quantity")
                                .tax("tax")
                                .taxRate("tax_rate")
                                .unit(UnitOfMeasureCode._10)
                                .unitPrice("unit_price")
                                .build()
                        )
                        .note("note")
                        .addPaymentDetail(
                            DocumentResponse.PaymentDetail.builder()
                                .bankAccountNumber("bank_account_number")
                                .iban("iban")
                                .paymentReference("payment_reference")
                                .swift("swift")
                                .build()
                        )
                        .paymentTerm("payment_term")
                        .previousUnpaidBalance("previous_unpaid_balance")
                        .purchaseOrder("purchase_order")
                        .remittanceAddress("remittance_address")
                        .remittanceAddressRecipient("remittance_address_recipient")
                        .serviceAddress("service_address")
                        .serviceAddressRecipient("service_address_recipient")
                        .serviceEndDate(LocalDate.parse("2019-12-27"))
                        .serviceStartDate(LocalDate.parse("2019-12-27"))
                        .shippingAddress("shipping_address")
                        .shippingAddressRecipient("shipping_address_recipient")
                        .state(DocumentState.DRAFT)
                        .subtotal("subtotal")
                        .addTaxDetail(
                            DocumentResponse.TaxDetail.builder()
                                .amount("amount")
                                .rate("rate")
                                .build()
                        )
                        .totalDiscount("total_discount")
                        .totalTax("total_tax")
                        .vendorAddress("vendor_address")
                        .vendorAddressRecipient("vendor_address_recipient")
                        .vendorEmail("vendor_email")
                        .vendorName("vendor_name")
                        .vendorTaxId("vendor_tax_id")
                        .build()
                )
                .page(0L)
                .pageSize(0L)
                .pages(0L)
                .total(0L)
                .build()

        val roundtrippedPaginatedDocumentResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(paginatedDocumentResponse),
                jacksonTypeRef<PaginatedDocumentResponse>(),
            )

        assertThat(roundtrippedPaginatedDocumentResponse).isEqualTo(paginatedDocumentResponse)
    }
}
