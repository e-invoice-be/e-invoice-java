// File generated from our OpenAPI spec by Stainless.

package com.e_invoice.api.models.documents

import com.e_invoice.api.core.jsonMapper
import com.e_invoice.api.models.documents.attachments.DocumentAttachment
import com.e_invoice.api.models.inbox.DocumentState
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import java.time.LocalDate
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class DocumentResponseTest {

    @Test
    fun create() {
        val documentResponse =
            DocumentResponse.builder()
                .id("id")
                .amountDue("amount_due")
                .addAttachment(
                    DocumentAttachment.builder()
                        .id("id")
                        .fileName("file_name")
                        .fileSize(0L)
                        .fileType("file_type")
                        .fileUrl("file_url")
                        .build()
                )
                .billingAddress("billing_address")
                .billingAddressRecipient("billing_address_recipient")
                .currency(CurrencyCode.EUR)
                .customerAddress("customer_address")
                .customerAddressRecipient("customer_address_recipient")
                .customerEmail("customer_email")
                .customerId("customer_id")
                .customerName("customer_name")
                .customerTaxId("customer_tax_id")
                .direction(DocumentDirection.INBOUND)
                .documentType(DocumentType.INVOICE)
                .dueDate(LocalDate.parse("2019-12-27"))
                .invoiceDate(LocalDate.parse("2019-12-27"))
                .invoiceId("invoice_id")
                .invoiceTotal("invoice_total")
                .addItem(
                    DocumentResponse.Item.builder()
                        .amount("amount")
                        .date(null)
                        .description("description")
                        .productCode("product_code")
                        .quantity("quantity")
                        .tax("tax")
                        .taxRate("tax_rate")
                        .unit(UnitOfMeasureCode._10)
                        .unitPrice("unit_price")
                        .build()
                )
                .note("note")
                .addPaymentDetail(
                    DocumentResponse.PaymentDetail.builder()
                        .bankAccountNumber("bank_account_number")
                        .iban("iban")
                        .paymentReference("payment_reference")
                        .swift("swift")
                        .build()
                )
                .paymentTerm("payment_term")
                .previousUnpaidBalance("previous_unpaid_balance")
                .purchaseOrder("purchase_order")
                .remittanceAddress("remittance_address")
                .remittanceAddressRecipient("remittance_address_recipient")
                .serviceAddress("service_address")
                .serviceAddressRecipient("service_address_recipient")
                .serviceEndDate(LocalDate.parse("2019-12-27"))
                .serviceStartDate(LocalDate.parse("2019-12-27"))
                .shippingAddress("shipping_address")
                .shippingAddressRecipient("shipping_address_recipient")
                .state(DocumentState.DRAFT)
                .subtotal("subtotal")
                .addTaxDetail(
                    DocumentResponse.TaxDetail.builder().amount("amount").rate("rate").build()
                )
                .totalDiscount("total_discount")
                .totalTax("total_tax")
                .vendorAddress("vendor_address")
                .vendorAddressRecipient("vendor_address_recipient")
                .vendorEmail("vendor_email")
                .vendorName("vendor_name")
                .vendorTaxId("vendor_tax_id")
                .build()

        assertThat(documentResponse.id()).isEqualTo("id")
        assertThat(documentResponse.amountDue()).contains("amount_due")
        assertThat(documentResponse.attachments().getOrNull())
            .containsExactly(
                DocumentAttachment.builder()
                    .id("id")
                    .fileName("file_name")
                    .fileSize(0L)
                    .fileType("file_type")
                    .fileUrl("file_url")
                    .build()
            )
        assertThat(documentResponse.billingAddress()).contains("billing_address")
        assertThat(documentResponse.billingAddressRecipient()).contains("billing_address_recipient")
        assertThat(documentResponse.currency()).contains(CurrencyCode.EUR)
        assertThat(documentResponse.customerAddress()).contains("customer_address")
        assertThat(documentResponse.customerAddressRecipient())
            .contains("customer_address_recipient")
        assertThat(documentResponse.customerEmail()).contains("customer_email")
        assertThat(documentResponse.customerId()).contains("customer_id")
        assertThat(documentResponse.customerName()).contains("customer_name")
        assertThat(documentResponse.customerTaxId()).contains("customer_tax_id")
        assertThat(documentResponse.direction()).contains(DocumentDirection.INBOUND)
        assertThat(documentResponse.documentType()).contains(DocumentType.INVOICE)
        assertThat(documentResponse.dueDate()).contains(LocalDate.parse("2019-12-27"))
        assertThat(documentResponse.invoiceDate()).contains(LocalDate.parse("2019-12-27"))
        assertThat(documentResponse.invoiceId()).contains("invoice_id")
        assertThat(documentResponse.invoiceTotal()).contains("invoice_total")
        assertThat(documentResponse.items().getOrNull())
            .containsExactly(
                DocumentResponse.Item.builder()
                    .amount("amount")
                    .date(null)
                    .description("description")
                    .productCode("product_code")
                    .quantity("quantity")
                    .tax("tax")
                    .taxRate("tax_rate")
                    .unit(UnitOfMeasureCode._10)
                    .unitPrice("unit_price")
                    .build()
            )
        assertThat(documentResponse.note()).contains("note")
        assertThat(documentResponse.paymentDetails().getOrNull())
            .containsExactly(
                DocumentResponse.PaymentDetail.builder()
                    .bankAccountNumber("bank_account_number")
                    .iban("iban")
                    .paymentReference("payment_reference")
                    .swift("swift")
                    .build()
            )
        assertThat(documentResponse.paymentTerm()).contains("payment_term")
        assertThat(documentResponse.previousUnpaidBalance()).contains("previous_unpaid_balance")
        assertThat(documentResponse.purchaseOrder()).contains("purchase_order")
        assertThat(documentResponse.remittanceAddress()).contains("remittance_address")
        assertThat(documentResponse.remittanceAddressRecipient())
            .contains("remittance_address_recipient")
        assertThat(documentResponse.serviceAddress()).contains("service_address")
        assertThat(documentResponse.serviceAddressRecipient()).contains("service_address_recipient")
        assertThat(documentResponse.serviceEndDate()).contains(LocalDate.parse("2019-12-27"))
        assertThat(documentResponse.serviceStartDate()).contains(LocalDate.parse("2019-12-27"))
        assertThat(documentResponse.shippingAddress()).contains("shipping_address")
        assertThat(documentResponse.shippingAddressRecipient())
            .contains("shipping_address_recipient")
        assertThat(documentResponse.state()).contains(DocumentState.DRAFT)
        assertThat(documentResponse.subtotal()).contains("subtotal")
        assertThat(documentResponse.taxDetails().getOrNull())
            .containsExactly(
                DocumentResponse.TaxDetail.builder().amount("amount").rate("rate").build()
            )
        assertThat(documentResponse.totalDiscount()).contains("total_discount")
        assertThat(documentResponse.totalTax()).contains("total_tax")
        assertThat(documentResponse.vendorAddress()).contains("vendor_address")
        assertThat(documentResponse.vendorAddressRecipient()).contains("vendor_address_recipient")
        assertThat(documentResponse.vendorEmail()).contains("vendor_email")
        assertThat(documentResponse.vendorName()).contains("vendor_name")
        assertThat(documentResponse.vendorTaxId()).contains("vendor_tax_id")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val documentResponse =
            DocumentResponse.builder()
                .id("id")
                .amountDue("amount_due")
                .addAttachment(
                    DocumentAttachment.builder()
                        .id("id")
                        .fileName("file_name")
                        .fileSize(0L)
                        .fileType("file_type")
                        .fileUrl("file_url")
                        .build()
                )
                .billingAddress("billing_address")
                .billingAddressRecipient("billing_address_recipient")
                .currency(CurrencyCode.EUR)
                .customerAddress("customer_address")
                .customerAddressRecipient("customer_address_recipient")
                .customerEmail("customer_email")
                .customerId("customer_id")
                .customerName("customer_name")
                .customerTaxId("customer_tax_id")
                .direction(DocumentDirection.INBOUND)
                .documentType(DocumentType.INVOICE)
                .dueDate(LocalDate.parse("2019-12-27"))
                .invoiceDate(LocalDate.parse("2019-12-27"))
                .invoiceId("invoice_id")
                .invoiceTotal("invoice_total")
                .addItem(
                    DocumentResponse.Item.builder()
                        .amount("amount")
                        .date(null)
                        .description("description")
                        .productCode("product_code")
                        .quantity("quantity")
                        .tax("tax")
                        .taxRate("tax_rate")
                        .unit(UnitOfMeasureCode._10)
                        .unitPrice("unit_price")
                        .build()
                )
                .note("note")
                .addPaymentDetail(
                    DocumentResponse.PaymentDetail.builder()
                        .bankAccountNumber("bank_account_number")
                        .iban("iban")
                        .paymentReference("payment_reference")
                        .swift("swift")
                        .build()
                )
                .paymentTerm("payment_term")
                .previousUnpaidBalance("previous_unpaid_balance")
                .purchaseOrder("purchase_order")
                .remittanceAddress("remittance_address")
                .remittanceAddressRecipient("remittance_address_recipient")
                .serviceAddress("service_address")
                .serviceAddressRecipient("service_address_recipient")
                .serviceEndDate(LocalDate.parse("2019-12-27"))
                .serviceStartDate(LocalDate.parse("2019-12-27"))
                .shippingAddress("shipping_address")
                .shippingAddressRecipient("shipping_address_recipient")
                .state(DocumentState.DRAFT)
                .subtotal("subtotal")
                .addTaxDetail(
                    DocumentResponse.TaxDetail.builder().amount("amount").rate("rate").build()
                )
                .totalDiscount("total_discount")
                .totalTax("total_tax")
                .vendorAddress("vendor_address")
                .vendorAddressRecipient("vendor_address_recipient")
                .vendorEmail("vendor_email")
                .vendorName("vendor_name")
                .vendorTaxId("vendor_tax_id")
                .build()

        val roundtrippedDocumentResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(documentResponse),
                jacksonTypeRef<DocumentResponse>(),
            )

        assertThat(roundtrippedDocumentResponse).isEqualTo(documentResponse)
    }
}
